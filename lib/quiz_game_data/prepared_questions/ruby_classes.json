[
	{
		"question": "Что выведет выражение `{ a: 1, b: 2 }.to_a`?",
		"options": [
			"Массив строк",
			"Массив массивов",
			"Хэш",
			"Массив чисел"
		],
		"correct_answer": "Массив массивов"
	},
	{
		"question": "Какой тип данных передается в блок при использовании метода `each` на хэше `{ a: 1 }.each { |data| puts data }`?",
		"options": [
			"Хэш",
			"Массив",
			"Строка",
			"Число"
		],
		"correct_answer": "Массив"
	},
	{
		"question": "Какой метод проверяет, равно ли значение нулю в Ruby?",
		"options": [
			"zero?",
			"nil?",
			"empty?",
			"none?"
		],
		"correct_answer": "zero?"
	},
	{
		"question": "Какие методы доступны только внутри класса и не могут быть вызваны на инстансе?",
		"options": [
			"public",
			"private",
			"protected",
			"module"
		],
		"correct_answer": "private"
	},
	{
		"question": "Можно ли использовать геттеры и сеттеры (например, `attr_accessor`) как приватные методы?",
		"options": [
			"Нет",
			"Да, если они объявлены ниже ключевого слова `private`",
			"Да, если они объявлены выше ключевого слова `private`",
			"Только сеттеры"
		],
		"correct_answer": "Да, если они объявлены ниже ключевого слова `private`"
	},
	{
		"question": "Какие методы доступны в подклассах, но недоступны извне?",
		"options": [
			"public",
			"private",
			"protected",
			"module"
		],
		"correct_answer": "protected"
	},
	{
		"question": "Что делает ключевое слово `super` в переопределенном методе?",
		"options": [
			"Вызывает метод суперкласса с теми же аргументами",
			"Вызывает метод суперкласса с аргументами по умолчанию",
			"Вызывает метод текущего класса",
			"Вызывает метод суперкласса без аргументов"
		],
		"correct_answer": "Вызывает метод суперкласса с теми же аргументами"
	},
	{
		"question": "Как выглядит альтернативная запись методов класса?",
		"options": [
			"class << self",
			"class_methods",
			"self_methods",
			"instance_methods"
		],
		"correct_answer": "class << self"
	},
	{
		"question": "Что такое переменная класса в Ruby?",
		"options": [
			"@variable",
			"@@variable",
			"$variable",
			"variable"
		],
		"correct_answer": "@@variable"
	},
	{
		"question": "Как вызвать метод класса из метода инстанса?",
		"options": [
			"self.method",
			"self.class.method",
			"class.method",
			"instance.method"
		],
		"correct_answer": "self.class.method"
	},
	{
		"question": "Что возвращает метод `Class.methods` или `instance.methods`?",
		"options": [
			"Все методы класса",
			"Все методы инстанса",
			"Все доступные методы",
			"Все приватные методы"
		],
		"correct_answer": "Все доступные методы"
	},
	{
		"question": "Как подключить модуль для методов инстанса?",
		"options": [
			"require",
			"include",
			"extend",
			"use"
		],
		"correct_answer": "include"
	},
	{
		"question": "Как создать класс в Ruby с помощью `Class.new`?",
		"options": [
			"My_custom_class = Class.create",
			"My_custom_class = Class.make",
			"My_custom_class = Class.new",
			"My_custom_class = Class.build"
		],
		"correct_answer": "My_custom_class = Class.new"
	},
	{
		"question": "Какая команда возвращает суперкласс класса?",
		"options": [
			"Class.superclass",
			"Class.parent",
			"Class.ancestor",
			"Class.base"
		],
		"correct_answer": "Class.superclass"
	},
	{
		"question": "Какой метод используется для получения всех приватных методов модуля?",
		"options": [
			"Module.private_methods",
			"Module.protected_methods",
			"Module.private_instance_methods",
			"Module.class_methods"
		],
		"correct_answer": "Module.private_instance_methods"
	}
]